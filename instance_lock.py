# -*- coding: utf-8 -*-
"""
Instance Lock Manager - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞
"""

import os
import sys
import time
import subprocess
from pathlib import Path
from config import logger


class InstanceLock:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤"""
    
    def __init__(self, lock_file="bot_instance.lock"):
        self.lock_file = Path(lock_file)
        self.lock_handle = None
        
    def acquire(self, timeout=5):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            if self.lock_file.exists():
                # –ß–∏—Ç–∞–µ–º PID –∏–∑ —Ñ–∞–π–ª–∞
                try:
                    with open(self.lock_file, 'r') as f:
                        old_pid = int(f.read().strip())
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —Ç–∞–∫–∏–º PID
                    if self._is_process_running(old_pid):
                        logger.error(f"‚ùå –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {old_pid})")
                        logger.info("üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: taskkill /f /im python.exe")
                        return False
                    else:
                        logger.info("üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                        self.lock_file.unlink()
                        
                except (ValueError, FileNotFoundError):
                    # –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                    logger.info("üßπ –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")
                    self.lock_file.unlink()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            current_pid = os.getpid()
            with open(self.lock_file, 'w') as f:
                f.write(str(current_pid))
            
            logger.info(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞ (PID: {current_pid})")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            return False
    
    def release(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            if self.lock_file.exists():
                self.lock_file.unlink()
                logger.info("üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def _is_process_running(self, pid):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º PID"""
        try:
            if sys.platform == "win32":
                # Windows
                result = subprocess.run(
                    ['tasklist', '/FI', f'PID eq {pid}', '/FO', 'CSV'],
                    capture_output=True,
                    text=True,
                    timeout=5
                )
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ PID –≤ –≤—ã–≤–æ–¥–µ (–∏—Å–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
                lines = result.stdout.strip().split('\n')
                return len(lines) > 1 and str(pid) in result.stdout
            else:
                # Unix/Linux
                os.kill(pid, 0)
                return True
        except (OSError, subprocess.TimeoutExpired, subprocess.CalledProcessError):
            return False
    
    def __enter__(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        if not self.acquire():
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞")
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        self.release()


def check_single_instance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞"""
    lock = InstanceLock()
    return lock.acquire()


def cleanup_instance_lock():
    """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    lock = InstanceLock()
    lock.release()