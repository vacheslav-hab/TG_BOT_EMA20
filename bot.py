"""Telegram Bot Manager"""

import os
from typing import List
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes
)
from config import logger, TELEGRAM_BOT_TOKEN, safe_log, EMA_PERIOD
from strategy import Signal
from position_manager import PositionUpdate
from subscribers_manager import SubscribersManager


class TelegramBot:
    def __init__(self):
        self.application = None
        self.subscribers = set()  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.subscribers_manager = SubscribersManager()
        self.running = False
        self.position_manager = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ main.py
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramBot")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ JSON –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self._load_subscribers_from_json()
    
    def _load_subscribers_from_json(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ JSON –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            subscriber_ids = self.subscribers_manager.get_subscriber_ids(active_only=True)
            self.subscribers = subscriber_ids
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ JSON")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            self.subscribers = set()
    
    def set_position_manager(self, position_manager):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π"""
        self.position_manager = position_manager
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        username = update.effective_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        first_name = update.effective_user.first_name
        last_name = update.effective_user.last_name
        language_code = update.effective_user.language_code
        
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {username} (ID: {user_id})")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ —á–µ—Ä–µ–∑ SubscribersManager
        is_new_subscriber = self.subscribers_manager.add_subscriber(
            user_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            language_code=language_code
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.subscribers.add(user_id)
        
        if is_new_subscriber:
            safe_log('info', f"‚úÖ –ù–û–í–´–ô –ø–æ–¥–ø–∏—Å—á–∏–∫: {username} (ID: {user_id})")
        else:
            safe_log('info', f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {username} (ID: {user_id})")
            
        logger.info(f"üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self.subscribers)}")
        
        welcome_message = (
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø - EMA20 Trading Signals Bot\n\n"
            "üìä –Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é 70 —Ç–æ–ø —Ñ—å—é—á–µ—Ä—Å–æ–≤ BingX –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥\n"
            "üéØ –û—Ç–ø—Ä–∞–≤–ª—è—é LONG/SHORT —Å–∏–≥–Ω–∞–ª—ã –ø—Ä–∏ –∫–∞—Å–∞–Ω–∏–∏ EMA20\n"
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –ù–ï —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã!\n\n"
            "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã\n"
            "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏\n"
            "/export - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV\n"
            "/report - –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç\n"
            "/position <id> - –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏\n"
            "/subscribers - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            "/export_subscribers - –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            "/help - –ü–æ–º–æ—â—å"
        )
        
        await update.message.reply_text(welcome_message)
        
    def _update_user_activity(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.subscribers_manager.update_subscriber_activity(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
        self._update_user_activity(update.effective_user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers_stats = self.subscribers_manager.get_statistics()
        
        status_message = (
            "ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:\n\n"
            f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if self.running else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
            f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_stats.get('active_subscribers', len(self.subscribers))}\n"
            f"üìã –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {subscribers_stats.get('total_commands_executed', 0)}\n"
            f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: 70 —Å–∏–º–≤–æ–ª–æ–≤ BingX\n"
            f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: 30 —Å–µ–∫—É–Ω–¥\n"
            f"üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: EMA{EMA_PERIOD} Touch Detection"
        )
        
        await update.message.reply_text(status_message)
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        self._update_user_activity(update.effective_user.id)
        
        help_message = (
            "üîç –ü–æ–º–æ—â—å –ø–æ EMA20 Trading Bot\n\n"
            "üìä –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
            f"‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é 70 —Ç–æ–ø —Ñ—å—é—á–µ—Ä—Å–æ–≤ –Ω–∞ BingX\n"
            f"‚Ä¢ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é EMA{EMA_PERIOD} –Ω–∞ 1h —Å–≤–µ—á–∞—Ö\n"
            "‚Ä¢ –û–±–Ω–∞—Ä—É–∂–∏–≤–∞—é –∫–∞—Å–∞–Ω–∏—è EMA20\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–∏–≥–Ω–∞–ª—ã —Å SL/TP —É—Ä–æ–≤–Ω—è–º–∏\n\n"
            "üö® –£—Å–ª–æ–≤–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:\n"
            "‚Ä¢ LONG: —Ü–µ–Ω–∞ > EMA20, EMA20 —Ä–∞—Å—Ç–µ—Ç, –∫–∞—Å–∞–Ω–∏–µ —Å–Ω–∏–∑—É\n"
            "‚Ä¢ SHORT: —Ü–µ–Ω–∞ < EMA20, EMA20 –ø–∞–¥–∞–µ—Ç, –∫–∞—Å–∞–Ω–∏–µ —Å–≤–µ—Ä—Ö—É\n\n"
            "üìà –£—Ä–æ–≤–Ω–∏:\n"
            "‚Ä¢ LONG: SL -1%, TP1 +1.5%, TP2 +3%\n"
            "‚Ä¢ SHORT: SL +1%, TP1 -1.5%, TP2 -3%\n\n"
            "‚è∞ Cooldown: 60 –º–∏–Ω –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏ –Ω–∞ –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª\n\n"
            "‚ö†Ô∏è –û–¢–ö–ê–ó –û–¢ –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ò:\n"
            "–¢–æ–ª—å–∫–æ –∞–Ω–∞–ª–∏–∑, –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã!"
        )
        
        await update.message.reply_text(help_message)
        
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        self._update_user_activity(update.effective_user.id)
        
        if self.position_manager:
            stats_message = self.position_manager.get_statistics_summary()
        else:
            stats_message = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:\n\n"
                "üéØ –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: --\n"
                "‚úÖ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: --\n"
                "üèÜ TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ: --\n"
                "‚ùå SL —Å—Ä–∞–±–æ—Ç–∞–ª–æ: --\n"
                "üìà –í–∏–Ω—Ä–µ–π—Ç: --%\n"
                "üí∞ –û–±—â–∏–π PnL: --%\n"
                "üìç –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: --\n\n"
                "‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã!"
            )
        
        await update.message.reply_text(stats_message)
    
    async def export_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        self._update_user_activity(update.effective_user.id)
        
        try:
            if not self.position_manager:
                await update.message.reply_text("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
                
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"trading_signals_{timestamp}.csv"
            
            self.position_manager.json_manager.export_to_csv(filename)
            
            if os.path.exists(filename):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(filename, 'rb') as f:
                    await update.message.reply_document(
                        document=f,
                        filename=filename,
                        caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(filename)
                logger.info(f"CSV —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
    
    async def report_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report - –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        self._update_user_activity(update.effective_user.id)
        
        try:
            if not self.position_manager:
                await update.message.reply_text("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç
            report = self.position_manager.get_daily_report()
            
            message = (
                f"üìÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç –∑–∞ {report['date']}\n\n"
                f"üéØ –°–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ –¥–µ–Ω—å: {report['total_signals']}\n"
                f"üí∞ –î–Ω–µ–≤–Ω–æ–π PnL: {report['total_pnl']:+.2f}%\n\n"
            )
            
            if report['positions']:
                message += "üìä –ü–æ–∑–∏—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å:\n"
                for pos in report['positions'][-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    status_emoji = {
                        'OPEN': 'üü°',
                        'TP1_HIT': 'üü¢', 
                        'TP2_HIT': 'üü¢',
                        'SL_HIT': 'üî¥',
                        'CLOSED': '‚ö™'
                    }.get(pos['status'], '‚ö™')
                    
                    message += f"{status_emoji} {pos['direction']} {pos['symbol']} - {pos['status']}\n"
                    
            message += "\n‚ö†Ô∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞, –Ω–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã!"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")
    
    async def position_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /position [signal_id] - –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        self._update_user_activity(update.effective_user.id)
        
        try:
            if not self.position_manager:
                await update.message.reply_text("‚ö†Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∑–∏—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
                
            args = context.args
            if not args:
                await update.message.reply_text(
                    "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /position <signal_id>\n"
                    "–ü—Ä–∏–º–µ—Ä: /position BTC-USDT_LONG_20250914_123456"
                )
                return
                
            signal_id = ' '.join(args)  # –ù–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–µ–ª–æ–≤ –≤ ID
            position_details = self.position_manager.get_position_details(signal_id)
            
            if not position_details:
                await update.message.reply_text(f"‚ùå –ü–æ–∑–∏—Ü–∏—è {signal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
                
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏
            status_emoji = {
                'OPEN': 'üü° –ê–∫—Ç–∏–≤–Ω–∞',
                'TP1_HIT': 'üü¢ TP1 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç', 
                'TP2_HIT': 'üü¢ TP2 –¥–æ—Å—Ç–∏–≥–Ω—É—Ç',
                'SL_HIT': 'üî¥ SL —Å—Ä–∞–±–æ—Ç–∞–ª',
                'CLOSED': '‚ö™ –ó–∞–∫—Ä—ã—Ç–∞'
            }.get(position_details['status'], '‚ö™ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            message = (
                f"üìä –î–µ—Ç–∞–ª–∏ –ø–æ–∑–∏—Ü–∏–∏\n\n"
                f"üÜî ID: {signal_id}\n"
                f"üìà {position_details['direction']} {position_details['symbol']}\n"
                f"üìç –í—Ö–æ–¥: ${position_details['entry_price']:,.6f}\n"
                f"üí≤ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${position_details.get('current_price', 0):,.6f}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji}\n"
                f"üöÄ –ú–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å: {position_details.get('max_profit', 0):+.2f}%\n"
                f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {position_details.get('max_drawdown', 0):+.2f}%\n"
                f"‚è∞ –°–æ–∑–¥–∞–Ω–∞: {position_details['created_at'].strftime('%Y-%m-%d %H:%M:%S')}\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é PnL
            if position_details.get('pnl_history'):
                message += "\nüìà –ò—Å—Ç–æ—Ä–∏—è PnL:\n"
                for record in position_details['pnl_history'][-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏
                    timestamp = datetime.fromisoformat(record['timestamp'])
                    message += (
                        f"‚Ä¢ {record['level_type']}: {record['pnl_percentage']:+.2f}% "
                        f"({timestamp.strftime('%H:%M:%S')})\n"
                    )
                    
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –ø–æ–∑–∏—Ü–∏–∏")
    
    async def subscribers_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribers - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        self._update_user_activity(update.effective_user.id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            stats = self.subscribers_manager.get_statistics()
            daily_report = self.subscribers_manager.get_daily_report()
            
            message = (
                f"üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n"
                f"üìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {stats.get('total_subscribers', 0)}\n"
                f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_subscribers', 0)}\n"
                f"üìã –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {stats.get('total_commands_executed', 0)}\n\n"
                f"üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è ({daily_report['date']}): \n"
                f"üÜï –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {daily_report['new_subscribers']}\n"
                f"üë§ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {daily_report['active_users_count']}\n"
                f"‚å®Ô∏è –ö–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {daily_report['total_commands']}\n\n"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if stats.get('first_subscriber_date'):
                first_date = datetime.fromisoformat(stats['first_subscriber_date'])
                message += f"üéØ –ü–µ—Ä–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {first_date.strftime('%Y-%m-%d %H:%M')}\n"
                
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å
            if stats.get('last_activity_date'):
                last_activity = datetime.fromisoformat(stats['last_activity_date'])
                message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_activity.strftime('%Y-%m-%d %H:%M')}\n"
            
            await update.message.reply_text(message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    
    async def export_subscribers_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /export_subscribers - —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ CSV"""
        self._update_user_activity(update.effective_user.id)
        
        try:
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ CSV
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"subscribers_{timestamp}.csv"
            
            self.subscribers_manager.export_to_csv(filename)
            
            if os.path.exists(filename):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                with open(filename, 'rb') as f:
                    await update.message.reply_document(
                        document=f,
                        filename=filename,
                        caption=f"üë• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(filename)
                logger.info(f"CSV —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {update.effective_user.id}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("export", self.export_command))
        self.application.add_handler(CommandHandler("report", self.report_command))
        self.application.add_handler(CommandHandler("position", self.position_command))
        self.application.add_handler(CommandHandler("subscribers", self.subscribers_command))
        self.application.add_handler(CommandHandler("export_subscribers", self.export_subscribers_command))
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.application.initialize()
            await self.application.start()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            await self.application.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook —É–¥–∞–ª–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ polling")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            await self.application.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=None
            )
            
            self.running = True
            safe_log('info', "‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try:
                await self.application.bot.delete_webhook(drop_pending_updates=True)
                logger.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ webhook –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            except Exception as cleanup_error:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {cleanup_error}")
            raise
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        self.running = False
        
        if self.application:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            
    def format_signal_message(self, signal: Signal) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–∏–≥–Ω–∞–ª–µ"""
        emoji = "üöÄ" if signal.direction == "LONG" else "üî¥"
        
        message = (
            f"{emoji} {signal.direction} {signal.symbol}\n\n"
            f"üìç Entry: ${signal.entry:,.6f}\n"
            f"üõë Stop Loss: ${signal.sl:,.6f}\n"
            f"üéØ Take Profit 1: ${signal.tp1:,.6f}\n"
            f"üéØ Take Profit 2: ${signal.tp2:,.6f}\n\n"
            f"üìà Risk/Reward: 1:{(abs(signal.tp1 - signal.entry) / abs(signal.entry - signal.sl)):.1f}\n"
            f"‚è∞ {signal.created_at.strftime('%H:%M:%S')}\n\n"
            f"‚ö†Ô∏è –ù–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã!"
        )
        
        return message
        
    async def broadcast_signals(self, signals: List[Signal]):
        """–†–∞—Å—Å—ã–ª–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not signals:
            logger.debug("–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ JSON
        self._load_subscribers_from_json()
        
        if not self.subscribers:
            safe_log('warning', f"‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! –°–µ–π—á–∞—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(self.subscribers)}")
            logger.info(f"üîó –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: https://t.me/ema20_scalping_bot")
            logger.info(f"üìã –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É")
            return
            
        logger.info(f"üì¢ –ù–ê–ß–ê–õ–û –†–ê–°–°–´–õ–ö–ò: {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Üí {len(self.subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
        for signal in signals:
            message = self.format_signal_message(signal)
            
            success_count = 0
            error_count = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            for user_id in list(self.subscribers):  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞
                try:
                    if self.application and self.application.bot:
                        await self.application.bot.send_message(
                            chat_id=user_id, 
                            text=message
                        )
                        success_count += 1
                    else:
                        logger.warning(f"–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        error_count += 1
                        
                except Exception as e:
                    error_count += 1
                    error_msg = str(e).lower()
                    safe_log('warning', f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if "bot was blocked" in error_msg or "chat not found" in error_msg or "user is deactivated" in error_msg:
                        self.subscribers.discard(user_id)
                        try:
                            await self.subscribers_manager.remove_subscriber_async(user_id)
                            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        except Exception as remove_error:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {user_id}: {remove_error}")
                        
            logger.info(
                f"‚úÖ –°–∏–≥–Ω–∞–ª {signal.direction} {signal.symbol} —Ä–∞–∑–æ—Å–ª–∞–Ω: "
                f"—É—Å–ø–µ—Ö {success_count}, –æ—à–∏–±–æ–∫ {error_count}"
            )
            
    def format_position_update_message(self, update: PositionUpdate) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏"""
        if update.triggered_level == "TP1":
            emoji = "üéØ"
            level_text = "Take Profit 1"
        elif update.triggered_level == "TP2":
            emoji = "üèÜ" 
            level_text = "Take Profit 2"
        elif update.triggered_level == "SL":
            emoji = "üõë"
            level_text = "Stop Loss"
        else:
            emoji = "üìä"
            level_text = "–ü–æ–∑–∏—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            
        pnl_emoji = "üíö" if update.pnl_percentage > 0 else "‚ùå"
        
        message = (
            f"{emoji} {level_text} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!\n\n"
            f"üìä {update.direction} {update.symbol}\n"
            f"üìç –¶–µ–Ω–∞: ${update.current_price:,.6f}\n"
            f"{pnl_emoji} PnL: {update.pnl_percentage:+.2f}%\n"
            f"‚è∞ {update.timestamp.strftime('%H:%M:%S')}\n\n"
            f"‚ö†Ô∏è –ü–æ–∑–∏—Ü–∏—è {'–∑–∞–∫—Ä—ã—Ç–∞' if update.new_status in ['TP2_HIT', 'SL_HIT'] else '—á–∞—Å—Ç–∏—á–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞'}"
        )
        
        return message
        
    async def broadcast_position_updates(self, updates: List[PositionUpdate]):
        """–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not updates:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ JSON
        self._load_subscribers_from_json()
        
        if not self.subscribers:
            safe_log('warning', "‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ–∑–∏—Ü–∏–π")
            return
            
        logger.info(f"üì® –†–ê–°–°–´–õ–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô: {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π ‚Üí {len(self.subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
        for update in updates:
            message = self.format_position_update_message(update)
            
            success_count = 0
            error_count = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            for user_id in list(self.subscribers):
                try:
                    if self.application and self.application.bot:
                        await self.application.bot.send_message(
                            chat_id=user_id, 
                            text=message
                        )
                        success_count += 1
                    else:
                        logger.warning(f"–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        error_count += 1
                        
                except Exception as e:
                    error_count += 1
                    error_msg = str(e).lower()
                    safe_log('warning', f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if "bot was blocked" in error_msg or "chat not found" in error_msg or "user is deactivated" in error_msg:
                        self.subscribers.discard(user_id)
                        try:
                            await self.subscribers_manager.remove_subscriber_async(user_id)
                            logger.info(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                        except Exception as remove_error:
                            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ {user_id}: {remove_error}")
                    
            logger.info(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update.symbol} {update.triggered_level} —Ä–∞–∑–æ—Å–ª–∞–Ω–æ: "
                f"—É—Å–ø–µ—Ö {success_count}, –æ—à–∏–±–æ–∫ {error_count}"
            )