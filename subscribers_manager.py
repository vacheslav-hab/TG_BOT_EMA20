# -*- coding: utf-8 -*-
"""
Subscribers Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏ Telegram –±–æ—Ç–∞
"""

import json
import os
import shutil
from datetime import datetime, timedelta
from typing import Dict, Set, Optional, Any
from dataclasses import dataclass
from pathlib import Path
import asyncio

from config import logger


@dataclass
class SubscriberData:
    """–î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    user_id: int
    username: Optional[str]
    first_name: Optional[str]
    last_name: Optional[str]
    language_code: Optional[str]
    subscribed_at: datetime
    last_activity: datetime
    is_active: bool = True
    total_commands: int = 0
    
    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON"""
        return {
            'user_id': self.user_id,
            'username': self.username,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'language_code': self.language_code,
            'subscribed_at': self.subscribed_at.isoformat(),
            'last_activity': self.last_activity.isoformat(),
            'is_active': self.is_active,
            'total_commands': self.total_commands
        }
    
    @classmethod
    def from_dict(cls, data: Dict) -> 'SubscriberData':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        return cls(
            user_id=data['user_id'],
            username=data.get('username'),
            first_name=data.get('first_name'),
            last_name=data.get('last_name'),
            language_code=data.get('language_code'),
            subscribed_at=datetime.fromisoformat(data['subscribed_at']),
            last_activity=datetime.fromisoformat(data['last_activity']),
            is_active=data.get('is_active', True),
            total_commands=data.get('total_commands', 0)
        )


class SubscribersManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏"""
    
    def __init__(self, subscribers_file: str = 'subscribers.json'):
        self.subscribers_file = subscribers_file
        self.backup_dir = Path(subscribers_file).parent / "backups"
        self.backup_dir.mkdir(exist_ok=True)
        self._lock = asyncio.Lock()  # Add lock for concurrent access
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._create_backup()
        
        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SubscribersManager: {subscribers_file}")
    
    def _create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        try:
            if os.path.exists(self.subscribers_file):
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_file = self.backup_dir / f"subscribers_backup_{timestamp}.json"
                shutil.copy2(self.subscribers_file, backup_file)
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
                self._cleanup_old_backups(days=30)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    def _cleanup_old_backups(self, days: int = 30):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            for backup_file in self.backup_dir.glob("subscribers_backup_*.json"):
                file_time = datetime.fromtimestamp(backup_file.stat().st_mtime)
                if file_time < cutoff_date:
                    backup_file.unlink()
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    async def load_data_async(self) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        async with self._lock:
            return self.load_data()
    
    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(self.subscribers_file):
                return self._get_empty_data_structure()
            
            with open(self.subscribers_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            return self._validate_and_update_structure(data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            return self._get_empty_data_structure()
    
    async def save_data_async(self, data: Dict[str, Any]):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ JSON —Ñ–∞–π–ª —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π"""
        async with self._lock:
            self.save_data(data)
    
    def save_data(self, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            data['metadata'] = {
                'last_updated': datetime.now().isoformat(),
                'version': '1.0',
                'total_subscribers': len(data.get('subscribers', {})),
                'active_subscribers': len([s for s in data.get('subscribers', {}).values() if s.get('is_active', True)])
            }
            
            # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            temp_file = f"{self.subscribers_file}.tmp"
            with open(temp_file, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            # –ó–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            if os.path.exists(self.subscribers_file):
                os.replace(temp_file, self.subscribers_file)
            else:
                os.rename(temp_file, self.subscribers_file)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if os.path.exists(f"{self.subscribers_file}.tmp"):
                os.remove(f"{self.subscribers_file}.tmp")
    
    def _get_empty_data_structure(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        return {
            'subscribers': {},
            'statistics': {
                'total_subscribers': 0,
                'active_subscribers': 0,
                'total_commands_executed': 0,
                'first_subscriber_date': None,
                'last_activity_date': None
            },
            'daily_stats': {},
            'metadata': {
                'created_at': datetime.now().isoformat(),
                'version': '1.0'
            }
        }
    
    def _validate_and_update_structure(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–µ–∫—Ü–∏–π
        empty_structure = self._get_empty_data_structure()
        
        for key in empty_structure:
            if key not in data:
                data[key] = empty_structure[key]
        
        return data
    
    async def add_subscriber_async(self, user_id: int, username: str = None,
                       first_name: str = None, last_name: str = None,
                       language_code: str = None) -> bool:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
        data = await self.load_data_async()
        
        is_new_subscriber = str(user_id) not in data['subscribers']
        now = datetime.now()
        
        if is_new_subscriber:
            # –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫
            subscriber = SubscriberData(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                language_code=language_code,
                subscribed_at=now,
                last_activity=now,
                is_active=True,
                total_commands=1
            )
            
            data['subscribers'][str(user_id)] = subscriber.to_dict()
            data['statistics']['total_subscribers'] += 1
            
            if data['statistics']['first_subscriber_date'] is None:
                data['statistics']['first_subscriber_date'] = now.isoformat()
                
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {username} (ID: {user_id})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            subscriber_data = data['subscribers'][str(user_id)]
            subscriber_data['username'] = username
            subscriber_data['first_name'] = first_name
            subscriber_data['last_activity'] = now.isoformat()
            subscriber_data['is_active'] = True
            subscriber_data['total_commands'] += 1
            
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {username} (ID: {user_id})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        data['statistics']['active_subscribers'] = len([
            s for s in data['subscribers'].values() if s.get('is_active', True)
        ])
        data['statistics']['total_commands_executed'] += 1
        data['statistics']['last_activity_date'] = now.isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        date_str = now.strftime("%Y-%m-%d")
        if date_str not in data['daily_stats']:
            data['daily_stats'][date_str] = {
                'new_subscribers': 0,
                'active_users': [],
                'total_commands': 0
            }
        
        if is_new_subscriber:
            data['daily_stats'][date_str]['new_subscribers'] += 1
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ list –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if isinstance(data['daily_stats'][date_str]['active_users'], set):
            data['daily_stats'][date_str]['active_users'] = list(data['daily_stats'][date_str]['active_users'])
        
        if user_id not in data['daily_stats'][date_str]['active_users']:
            data['daily_stats'][date_str]['active_users'].append(user_id)
        
        data['daily_stats'][date_str]['total_commands'] += 1
        
        await self.save_data_async(data)
        return is_new_subscriber
    
    def add_subscriber(self, user_id: int, username: str = None,
                       first_name: str = None, last_name: str = None,
                       language_code: str = None) -> bool:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ"""
        data = self.load_data()
        
        is_new_subscriber = str(user_id) not in data['subscribers']
        now = datetime.now()
        
        if is_new_subscriber:
            # –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫
            subscriber = SubscriberData(
                user_id=user_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                language_code=language_code,
                subscribed_at=now,
                last_activity=now,
                is_active=True,
                total_commands=1
            )
            
            data['subscribers'][str(user_id)] = subscriber.to_dict()
            data['statistics']['total_subscribers'] += 1
            
            if data['statistics']['first_subscriber_date'] is None:
                data['statistics']['first_subscriber_date'] = now.isoformat()
                
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {username} (ID: {user_id})")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
            subscriber_data = data['subscribers'][str(user_id)]
            subscriber_data['username'] = username
            subscriber_data['first_name'] = first_name
            subscriber_data['last_activity'] = now.isoformat()
            subscriber_data['is_active'] = True
            subscriber_data['total_commands'] += 1
            
            logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫: {username} (ID: {user_id})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        data['statistics']['active_subscribers'] = len([
            s for s in data['subscribers'].values() if s.get('is_active', True)
        ])
        data['statistics']['total_commands_executed'] += 1
        data['statistics']['last_activity_date'] = now.isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        date_str = now.strftime("%Y-%m-%d")
        if date_str not in data['daily_stats']:
            data['daily_stats'][date_str] = {
                'new_subscribers': 0,
                'active_users': [],
                'total_commands': 0
            }
        
        if is_new_subscriber:
            data['daily_stats'][date_str]['new_subscribers'] += 1
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ list –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if isinstance(data['daily_stats'][date_str]['active_users'], set):
            data['daily_stats'][date_str]['active_users'] = list(data['daily_stats'][date_str]['active_users'])
        
        if user_id not in data['daily_stats'][date_str]['active_users']:
            data['daily_stats'][date_str]['active_users'].append(user_id)
        
        data['daily_stats'][date_str]['total_commands'] += 1
        
        self.save_data(data)
        return is_new_subscriber
    
    async def update_subscriber_activity_async(self, user_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        data = await self.load_data_async()
        
        if str(user_id) in data['subscribers']:
            now = datetime.now()
            data['subscribers'][str(user_id)]['last_activity'] = now.isoformat()
            data['subscribers'][str(user_id)]['total_commands'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            data['statistics']['total_commands_executed'] += 1
            data['statistics']['last_activity_date'] = now.isoformat()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            date_str = now.strftime("%Y-%m-%d")
            if date_str not in data['daily_stats']:
                data['daily_stats'][date_str] = {
                    'new_subscribers': 0,
                    'active_users': [],
                    'total_commands': 0
                }
            
            if user_id not in data['daily_stats'][date_str]['active_users']:
                data['daily_stats'][date_str]['active_users'].append(user_id)
            
            data['daily_stats'][date_str]['total_commands'] += 1
            
            await self.save_data_async(data)
    
    def update_subscriber_activity(self, user_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        data = self.load_data()
        
        if str(user_id) in data['subscribers']:
            now = datetime.now()
            data['subscribers'][str(user_id)]['last_activity'] = now.isoformat()
            data['subscribers'][str(user_id)]['total_commands'] += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            data['statistics']['total_commands_executed'] += 1
            data['statistics']['last_activity_date'] = now.isoformat()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            date_str = now.strftime("%Y-%m-%d")
            if date_str not in data['daily_stats']:
                data['daily_stats'][date_str] = {
                    'new_subscribers': 0,
                    'active_users': [],
                    'total_commands': 0
                }
            
            if user_id not in data['daily_stats'][date_str]['active_users']:
                data['daily_stats'][date_str]['active_users'].append(user_id)
            
            data['daily_stats'][date_str]['total_commands'] += 1
            
            self.save_data(data)
    
    async def remove_subscriber_async(self, user_id: int):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (–ø–æ–º–µ—Ç–∫–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)"""
        data = await self.load_data_async()
        
        if str(user_id) in data['subscribers']:
            data['subscribers'][str(user_id)]['is_active'] = False
            data['subscribers'][str(user_id)]['last_activity'] = datetime.now().isoformat()
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            data['statistics']['active_subscribers'] = len([
                s for s in data['subscribers'].values() if s.get('is_active', True)
            ])
            
            await self.save_data_async(data)
            logger.info(f"üö´ –ü–æ–¥–ø–∏—Å—á–∏–∫ {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    def remove_subscriber(self, user_id: int):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (–ø–æ–º–µ—Ç–∫–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π)"""
        data = self.load_data()
        
        if str(user_id) in data['subscribers']:
            data['subscribers'][str(user_id)]['is_active'] = False
            data['subscribers'][str(user_id)]['last_activity'] = datetime.now().isoformat()
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            data['statistics']['active_subscribers'] = len([
                s for s in data['subscribers'].values() if s.get('is_active', True)
            ])
            
            self.save_data(data)
            logger.info(f"üö´ –ü–æ–¥–ø–∏—Å—á–∏–∫ {user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    async def get_subscribers_async(self, active_only: bool = True) -> Dict[int, SubscriberData]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        data = await self.load_data_async()
        subscribers = {}
        
        for user_id_str, subscriber_data in data['subscribers'].items():
            if not active_only or subscriber_data.get('is_active', True):
                user_id = int(user_id_str)
                subscribers[user_id] = SubscriberData.from_dict(subscriber_data)
        
        return subscribers
    
    def get_subscribers(self, active_only: bool = True) -> Dict[int, SubscriberData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        data = self.load_data()
        subscribers = {}
        
        for user_id_str, subscriber_data in data['subscribers'].items():
            if not active_only or subscriber_data.get('is_active', True):
                user_id = int(user_id_str)
                subscribers[user_id] = SubscriberData.from_dict(subscriber_data)
        
        return subscribers
    
    async def get_subscriber_ids_async(self, active_only: bool = True) -> Set[int]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        subscribers = await self.get_subscribers_async(active_only)
        return set(subscribers.keys())
    
    def get_subscriber_ids(self, active_only: bool = True) -> Set[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        subscribers = self.get_subscribers(active_only)
        return set(subscribers.keys())
    
    async def get_statistics_async(self) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        data = await self.load_data_async()
        return data['statistics']
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
        data = self.load_data()
        return data['statistics']
    
    async def get_daily_report_async(self, date: Optional[datetime] = None) -> Dict[str, Any]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if date is None:
            date = datetime.now()
        
        date_str = date.strftime("%Y-%m-%d")
        data = await self.load_data_async()
        
        daily_data = data['daily_stats'].get(date_str, {
            'new_subscribers': 0,
            'active_users': [],
            'total_commands': 0
        })
        
        return {
            'date': date_str,
            'new_subscribers': daily_data['new_subscribers'],
            'active_users_count': len(daily_data['active_users']),
            'total_commands': daily_data['total_commands'],
            'active_users': daily_data['active_users']
        }
    
    def get_daily_report(self, date: Optional[datetime] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if date is None:
            date = datetime.now()
        
        date_str = date.strftime("%Y-%m-%d")
        data = self.load_data()
        
        daily_data = data['daily_stats'].get(date_str, {
            'new_subscribers': 0,
            'active_users': [],
            'total_commands': 0
        })
        
        return {
            'date': date_str,
            'new_subscribers': daily_data['new_subscribers'],
            'active_users_count': len(daily_data['active_users']),
            'total_commands': daily_data['total_commands'],
            'active_users': daily_data['active_users']
        }
    
    def export_to_csv(self, output_file: str):
        """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ CSV —Ñ–æ—Ä–º–∞—Ç"""
        import csv
        
        data = self.load_data()
        
        with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = [
                'user_id', 'username', 'first_name', 'last_name', 'language_code',
                'subscribed_at', 'last_activity', 'is_active', 'total_commands'
            ]
            
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for user_id_str, subscriber_data in data['subscribers'].items():
                writer.writerow({
                    'user_id': subscriber_data['user_id'],
                    'username': subscriber_data.get('username', ''),
                    'first_name': subscriber_data.get('first_name', ''),
                    'last_name': subscriber_data.get('last_name', ''),
                    'language_code': subscriber_data.get('language_code', ''),
                    'subscribed_at': subscriber_data['subscribed_at'],
                    'last_activity': subscriber_data['last_activity'],
                    'is_active': subscriber_data.get('is_active', True),
                    'total_commands': subscriber_data.get('total_commands', 0)
                })
        
        logger.info(f"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ CSV: {output_file}")
    
    def cleanup_inactive_subscribers(self, days_inactive: int = 90):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)"""
        data = self.load_data()
        cutoff_date = datetime.now() - timedelta(days=days_inactive)
        
        removed_count = 0
        for user_id_str, subscriber_data in list(data['subscribers'].items()):
            last_activity = datetime.fromisoformat(subscriber_data['last_activity'])
            
            if last_activity < cutoff_date and not subscriber_data.get('is_active', True):
                del data['subscribers'][user_id_str]
                removed_count += 1
        
        if removed_count > 0:
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            data['statistics']['total_subscribers'] = len(data['subscribers'])
            data['statistics']['active_subscribers'] = len([
                s for s in data['subscribers'].values() if s.get('is_active', True)
            ])
            
            self.save_data(data)
            logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {removed_count} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        
        return removed_count