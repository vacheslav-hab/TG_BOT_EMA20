import os
import logging
from dotenv import load_dotenv
from decimal import Decimal

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# EMA Configuration
EMA_PERIOD = 20  # –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ EMA

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import sys

# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
file_handler = logging.FileHandler('bot.log', encoding='utf-8')
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setStream(sys.stdout)

# –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –±–µ–∑ emoji –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
file_formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
console_formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')

file_handler.setFormatter(file_formatter)
console_handler.setFormatter(console_formatter)

logging.basicConfig(
    level=logging.INFO,
    handlers=[file_handler, console_handler]
)

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ emoji –Ω–∞ Windows
def safe_log(level, message, *args, **kwargs):
    """–£–±–∏—Ä–∞–µ–º emoji —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows CP1251"""
    # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω—ã emoji –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    emoji_replacements = {
        '‚úÖ': '[OK]',
        '‚ùå': '[ERROR]', 
        '‚ö†Ô∏è': '[WARNING]',
        'üìä': '[STATS]',
        'üìÇ': '[FILE]',
        'üîÑ': '[REPEAT]',
        'üìà': '[UP]',
        'üìâ': '[DOWN]',
        'üéØ': '[TARGET]',
        'üí∞': '[PROFIT]',
        'üöÄ': '[LAUNCH]',
        'üìç': '[POINT]'
    }
    
    # –ó–∞–º–µ–Ω—è–µ–º emoji –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    clean_message = message
    for emoji, replacement in emoji_replacements.items():
        clean_message = clean_message.replace(emoji, replacement)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    getattr(logger, level)(clean_message, *args, **kwargs)

# API Configuration
BINGX_API_KEY = os.getenv('BINGX_API_KEY')
BINGX_SECRET_KEY = os.getenv('BINGX_SECRET_KEY')
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

# Trading Parameters
SYMBOL_COUNT = int(os.getenv('SYMBOL_COUNT', 70))
TIMEFRAME = os.getenv('TIMEFRAME', '1h')
POLL_INTERVAL_SEC = int(os.getenv('POLL_INTERVAL_SEC', 30))
# –¢–û–õ–ï–†–ê–ù–¢–ù–û–°–¢–¨ –ö–ê–°–ê–ù–ò–Ø EMA20 (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–∞—è)
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: 0.001 = 0.1% (–º–∞–ª–æ) ‚Äî 0.005 = 0.5% (—à–∏—Ä–µ)
TOUCH_TOLERANCE_PCT = Decimal(os.getenv('TOUCH_TOLERANCE_PCT', '0.001'))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0.001 (0.1%)
MIN_SIGNAL_COOLDOWN_MIN = int(os.getenv('MIN_SIGNAL_COOLDOWN_MIN', 60))
MIN_VOLUME_USDT = float(os.getenv('MIN_VOLUME_USDT', 1000000))  # Default 1M USDT

# Data Storage
JSON_FILE = os.getenv('JSON_FILE', 'signals.json')

def validate_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
    required_vars = ['BINGX_API_KEY', 'BINGX_SECRET_KEY', 'TELEGRAM_BOT_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        return False
    
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    return True